TurboVNC Compatibility Guide
============================

In order to realize the full performance benefits of TurboVNC, it is necessary
to use a TurboVNC server and a TurboVNC viewer in concert.  However, TurboVNC
is fully backward compatible with TightVNC, RealVNC, and other VNC flavors.
You can use the TurboVNC viewer to connect to a non-TurboVNC server (or vice
versa), although this will result in some decrease in performance.

Compatibility with TightVNC
===========================

TurboVNC is a derivative of TightVNC and uses an optimized subset of the
Tight protocol.  Extensive research was conducted in which the TightVNC
encoder was benchmarked under a variety of different real-world application
workloads and a variety of different configurations.  This research revealed
several fundamental performance bottlenecks in TightVNC, and these were removed
or accelerated to form TurboVNC.  TurboVNC does not claim to encode data as
"tightly" as TightVNC in all cases, but it does claim to achieve at least an
order of magnitude better performance.

TurboVNC should, for the most part, be fully compatible with TightVNC, but
there are a few things to bear in mind when mixing TightVNC viewers with
TurboVNC servers (and vice versa):

TightVNC Server --> TurboVNC Viewer
-----------------------------------
-- TightVNC specifies the JPEG quality level on a scale from 0 to 9.  This
   translates to actual JPEG quality as follows:

   TABLE 1:
   TightVNC JPEG quality level:   0   1   2   3   4   5   6   7   8   9
   Actual JPEG quality:           5  10  15  25  37  50  60  70  75  80
   Actual JPEG subsampling:      2X  2X  2X  2X  2X  2X  2X  2X  2X  2X

   TurboVNC, on the other hand, includes extensions to the Tight protocol that
   allow the JPEG quality to be specified on the standard 1-100 scale and allow
   the JPEG chrominance subsampling to be specified seperately.

   When a TurboVNC viewer is connected to a TightVNC server, setting the
   JPEG quality to N in the TurboVNC viewer sets the TightVNC JPEG quality
   level to N/10 (0 <= N <= 9) on the TightVNC server.  For instance, if you
   set the JPEG quality to 95 in the TurboVNC viewer, this would translate to
   a JPEG quality level of 9 on the TightVNC server, which would set the
   actual JPEG quality to 80.

-- Changing the JPEG chrominance subsampling option in the TurboVNC viewer has
   no effect when connecting to a TightVNC server.  TightVNC uses libjpeg to
   perform its JPEG compression, and unmodified versions of libjpeg can only do
   2X subsampling.

-- TurboVNC only supports Zlib compression level 1, because higher compression
   levels use too much CPU time to be useful for the types of image workloads
   that TurboVNC is designed to support.  However, although Zlib compression
   levels 2-9 cannot be set using the TurboVNC Viewer GUI, you can still
   specify these higher Zlib compression levels from the TurboVNC viewer
   command line.

-- TurboVNC supports an extension to the TightVNC protocol which allows the
   server to tell the viewer not to use Zlib to decompress a particular
   rectangle.  Zlib introduces a tremendous amount of performance overhead,
   even when compression level 0 (no compression) is used.  Thus, when a
   TurboVNC viewer requests Zlib compression level 0 from the TurboVNC server,
   the TurboVNC server bypasses Zlib altogether.  TightVNC servers do not
   support this extension, and thus they will still use Zlib to "compress"
   data even if you request no Zlib compression using the TurboVNC viewer.

-- The TightVNC server will use much more CPU time across the board than the
   TurboVNC server, all else being equal.

TurboVNC Server --> TightVNC Viewer
-----------------------------------
-- The TurboVNC server will attempt to emulate the behavior of a TightVNC
   server and will translate TightVNC JPEG quality levels into actual JPEG
   quality and subsampling as specified in TABLE 1.

Compatibility with RealVNC
==========================

The TurboVNC server and viewer both support the Hextile and Raw protocols,
which are compatible with RealVNC.  Neither of these protocols can be selected
from the TurboVNC viewer GUI, but Hextile will be selected automatically when
connecting to a RealVNC server.  Raw will be automatically selected when
connecting to a VNC server running on the same machine as the viewer.  Both
Raw and Hextile can also be manually selected from the vncviewer command line.

The Raw protocol can perform well on gigabit links.  The Hextile protocol,
however, is extremely latency-sensitive, even on the fastest of networks.
Thus, neither protocol should be used unless absolutely necessary.  One
interesting note, however, is that many of the TurboVNC viewer enhancements
(including optimized blitting and double buffering) are available even when
using these legacy protocols.  Thus, in some cases, the TurboVNC viewer
may actually perform better than the RealVNC viewer when connecting to RealVNC
servers.
