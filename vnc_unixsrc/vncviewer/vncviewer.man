'\" t
.\" ** The above line should force tbl to be a preprocessor **
.\" Man page for X vncviewer
.\"
.\" Copyright (C) 1998 Marcus.Brinkmann@ruhr-uni-bochum.de
.\" Copyright (C) 2000,2001 Red Hat, Inc.
.\" Copyright (C) 2001-2003 Constantin Kaplinsky
.\" Copyright (C) 2005-2008 Sun Microsystems, Inc.
.\" Copyright (C) 2010 University Corporation for Atmospheric Research
.\" Copyright (C) 2010 D. R. Commander
.\"
.\" You may distribute under the terms of the GNU General Public
.\" License as specified in the file LICENCE.TXT that comes with the
.\" TurboVNC distribution.
.\"
.TH vncviewer 1 "May 2010" "" "TurboVNC"
.SH NAME
vncviewer \- an X11 viewer/client for TurboVNC
.SH SYNOPSIS
\fBvncviewer\fR [\fIoptions\fR] [\fIhost\fR][\fI:display\fR]
.br
\fBvncviewer\fR [\fIoptions\fR] [\fIhost\fR][\fI::port\fR]
.br
\fBvncviewer\fR [\fIoptions\fR] -listen [\fIdisplay\fR]
.br
\fBvncviewer\fR -help
.br
.SH DESCRIPTION
.B vncviewer
is an Xt\-based client application for the VNC (Virtual Network
Computing) system. It can connect to any VNC server, allowing
you to control the desktop environment of a different machine.

Once connected, you can press F8 to display a pop\-up configuration dialog.
Press F8 twice to send an F8 keystroke to the remote system.
.SH OPTIONS
.TP
\fB\-help\fR
Prints a brief list of command-line options.
.TP
\fB\-listen\fR
Start the viewer in "listen mode." The viewer will listen on port
5500+\fIdisplay\fR for reverse connections from a VNC server.
To connect to a listening viewer from a Windows VNC server, choose
"Add New Client..." from the TurboVNC Server's tray menu. To connect
to a listening viewer from a Unix/Linux VNC server, use the \fBvncconnect\fR(1)
program.
.TP
\fB\-via\fR \fIgateway\fR
Automatically create an encrypted TCP tunnel to machine \fIgateway\fR,
then use that tunnel to connect to a VNC server running on \fIhost\fR. This option is specific
to TurboVNC or TightVNC. By default, this option invokes SSH local port
forwarding and assumes that the SSH client binary is located under
/usr/bin/ssh. Note that when using the \fB\-via\fR option, the \fIhost\fR
machine name should be specified from the point of view of the \fIgateway\fR
machine. For example, "localhost" denotes the \fIgateway\fR, not the
machine on which vncviewer was launched. See the ENVIRONMENT section
below for information on configuring the \fB\-via\fR option.
.TP
\fB\-shared\fR
When connecting, request a shared session. In TurboVNC, this is the
default. When the session is shared, other users can connect to the
session (assuming they have the correct password) and collaborate with
the user who started the session.
.TP
\fB\-noshared\fR
When connecting, specify that the session may not be shared. If the VNC
server is configured using default settings, then it will only allow you to
connect in non-shared mode if no one else is already connected to the session.
Otherwise, if others are already connected to the session, then the VNC server
will deny your connection request if you specify this option.
.TP
\fB\-viewonly\fR
Disable transfer of mouse and keyboard events from the client to the
server.
.TP
\fB\-fullscreen\fR
Start in full\-screen mode. Please be aware that operating in
full\-screen mode may confuse X window managers. Typically, such
conflicts cause incorrect handling of input focus or make the viewer
window disappear mysteriously. See the grabKeyboard setting in the
RESOURCES section below for a method to solve the input focus problem.
.TP
\fB\-noraiseonbeep\fR
By default, if an application running on the VNC server generates a
"bell" event, it will cause the VNC viewer window to restore itself
if it is minimized. Passing this option to the viewer causes it to
ignore remote bell events. This option is specific to TightVNC or
TurboVNC.
.TP
\fB\-passwd\fR \fIpasswd\-file\fR
File from which to get the VNC password (as generated by the
\fBvncpasswd\fR(1) program.)  Irrelevant if Unix Login authentication is used.
.TP
\fB\-user\fR \fIuser\-name\fR
Specify user name for Unix Login authentication (Default: current user name.)
.TP
\fB\-nounixlogin\fR
Force \fBvncviewer\fR to ignore the Unix Login authentication method if it is
offered by the VNC server.
.TP
\fB\-encodings\fR \fIencoding\-list\fR
This option specifies a list of image encoding methods that vncviewer is
allowed to use. The default list is "tight copyrect" for remote connections and
"raw copyrect" for local connections. You can specify "tight" as the encoding
list in order to disable the use of CopyRect encoding (see the ENCODINGS
section below for more information about CopyRect encoding.)

This version of vncviewer also supports Hextile encoding, for backward
compatibility with RealVNC. Specifying "hextile" at the head of the encoding
list will force the use of this protocol. Hextile will also be used
automatically whenever you connect to any VNC server that doesn't support Tight
encoding. Since Hextile is a very latency-sensitive protocol, you may wish to
override this behavior and use Raw encoding instead if your network is
sufficiently fast. For more information on encodings, see the ENCODINGS section
below.
.TP
\fB\-bgr233\fR
Always use the BGR233 format to encode pixel data. This reduces
network traffic, but colors may be represented inaccurately. The
bgr233 format is an 8\-bit "true color" format, with 2 bits of blue, 3
bits of green, and 3 bits of red. If BGR233 encoding is enabled, JPEG
encoding is automatically disabled and cannot be re-enabled without restarting
the viewer.
.TP
\fB\-owncmap\fR
Try to use a PseudoColor visual and a private colormap for the VNC viewer. This
allows the VNC server to control the viewer's colormap.
.TP
\fB\-truecolour\fR, \fB\-truecolor\fR
Try to use a TrueColor visual for the VNC viewer.
.TP
\fB\-depth\fR \fIdepth\fR
If the VNC viewer is running on an X display which supports multiple TrueColor
visuals of different depths, this option tells the viewer to use a visual with
the specified depth (in bits per pixel.) If successful, the VNC server will
send pixels using this color depth.
.TP
\fB\-compresslevel \fIlevel\fR
Level 1 applies a minimum amount of Zlib compression to the Lossless Tight
protocol in order to reduce its bandwidth usage.  Level 0 disables Zlib
compression in the Lossless Tight protocol in order to decrease server CPU
usage.  This option has no effect if JPEG compression is enabled.
.TP
\fB\-nojpeg\fR
Disable the use of JPEG compression in the Tight protocol. The resulting
"Lossless Tight" image protocol is mathematically lossless but will use
significantly more network bandwidth than the Tight+JPEG protocol.
.TP
\fB\-samp \fI1X | 2X | 4X | gray\fR
Specifies the level of chrominance subsampling to use when compressing JPEG
images with the Tight+JPEG protocol.

Each pixel in a JPEG image is represented as a brightness (luminance)
value and a pair of color (chrominance) values. Chrominance subsampling
discards some of the chrominance values to reduce the image size, but it can
create visible compression artifacts. 4X subsampling provides the best
color compression but also the lowest quality, since it discards the
chrominance values for every other pixel in both X and Y directions. 2X
subsampling discards the chrominance values for every other pixel in the X
direction only.  Grayscale subsampling discards all chrominance values in the
image, leaving only luminance.  1X subsampling is the same as no subsampling
(this is the default in TurboVNC.)
.TP
\fB\-quality \fIlevel\fR
Specifies the JPEG quality (1..100) to use when compressing JPEG images with
the Tight+JPEG protocol.

Higher JPEG quality levels result in less compression but better image quality.
The default quality level of 95, when used without chrominance subsampling,
should produce compressed images whose compression artifacts are imperceptible
to human vision.
.TP
\fB\-nocursorshape\fR
Normally, TurboVNC and TightVNC servers will send only changes to the
remote mouse cursor's shape and position. This results in the best mouse
responsiveness. Disabling cursor shape updates causes the server to
instead draw the mouse cursor and send it to the client as an image.
Disabling cursor shape updates can cause mouse movements to be painfully
slow, so do it only if something isn't working right.
.TP
\fB\-x11cursor\fR
Use a real X11 cursor with X-style cursor shape updates instead of
drawing the remote cursor on the framebuffer. This option also
disables the dot cursor and disables cursor position updates unless
the viewer is running in full\-screen mode.
.TP
\fB\-autopass\fR
Read a plain-text password from stdin.  Irrelevant if Unix Login
authentication is used.
.TP
\fB\-singlebuffer\fR
Normally, TurboVNC will wait until a window has finished redrawing
on the server before it redraws the window on the client. This is
called "double buffering", and it prevents tearing artifacts when
a 3D or video application switches frames. Disabling double
buffering makes TurboVNC behave more like other VNC implementations.
Normally, you shouldn't need to change this setting unless
something isn't working right.
.TP
\fB\-lowqual\fR
Select the "Tight + Low Quality JPEG" image encoding protocol. This is the
equivalent of \fB\-samp 4X -quality 30\fR.

The Tight + Low Quality JPEG protocol uses paletted encoding with Zlib
compression level 1 to encode image rectangles with <= 24 colors and
low-quality TurboJPEG encoding (quality level 30 with 4X subsampling) to encode
all other image rectangles. This protocol will produce very noticeable image
compression artifacts on rectangles with large numbers of unique colors, but it
will perform optimally on low-bandwidth, high-latency connections such as
broadband. You can use TurboVNC's "Lossless Refresh" feature if you need to
occasionally send a frame without compression artifacts.
.TP
\fB\-medqual\fR
Select the "Tight + Medium Quality JPEG" image encoding protocol. This is the
equivalent of \fB\-samp 2X -quality 80\fR.

The Tight + Medium Quality JPEG protocol uses paletted encoding with Zlib
compression level 1 to encode image rectangles with <= 24 colors and
medium-quality TurboJPEG encoding (quality level 80 with 2X subsampling) to
encode all other image rectangles. This protocol may produce some compression
artifacts on rectangles with large numbers of unique colors, but these
artifacts are generally minor and not very noticeable. This protocol uses about
half the network bandwidth of the default protocol (Tight + Perceptually
Lossless JPEG) and about twice the network bandwidth of the
Tight + Low Quality JPEG protocol.
.TP
\fB\-lossless\fR
Select the "Lossless Tight" image encoding protocol. This is the equivalent
of \fB\-nojpeg -compresslevel 0\fR.

The Lossless Tight protocol uses uncompressed paletted encoding for image
rectangles with low numbers of unique colors and uncompressed raw encoding for
image rectangles with high numbers of unique colors. This protocol, on average,
uses quite a bit less CPU time than Tight+JPEG and requires much less bandwidth
than Raw encoding. However, it uses much more bandwidth than Tight+JPEG
encoding and is thus only appropriate for use on gigabit and faster
connections.
.TP
\fB\-losslesswan\fR
Select the "Lossless Tight + Zlib" image encoding protocol. This is the
equivalent of \fB\-nojpeg -compresslevel 1\fR.

The Lossless Tight + Zlib protocol is the same as the Lossless Tight
protocol, except that it compresses all image rectangles with Zlib compression
level 1 prior to transmission.  For image rectangles with low numbers of unique
colors, this protocol will perform similarly to the Tight+JPEG protocol.
However, it will use significantly more bandwidth and CPU time than Tight+JPEG
when sending image rectangles with high numbers of unique colors.  The
usefulness of this protocol is debatable, but it is included for those who
absolutely must use mathematically lossless compression in environments where
performance is constrained more by the network than the server CPU.  The
Lossless Refresh feature in TurboVNC uses this protocol.

.SH ENCODINGS
In order to simplify the implementation of the VNC viewer, the VNC protocol is
designed such that the VNC server sends information in whatever format the
viewer desires. If the viewer claims to support multiple formats, then the
server will choose one.

.I Pixel format
refers to the mathematical representation of an individual pixel. The most
common formats are "true color", in which each pixel is represented by separate
red, green, and blue intensity values, and "pseudo color", in which each pixel
is represented by an index into a table of red, green, and blue intensity
values.

.I Encoding
refers to how an image is represented on the network. The VNC server normally
sends only the areas of its display that have changed since the last update.
These areas are sent as separate rectangles of pixels, and each rectangle can
be encoded using a different method. All rectangles contain a header which
specifies the location and size of the rectangle and how it was encoded. The
encoding methods supported by the TurboVNC viewer are listed below.
.TP
.B Raw
Raw encoding sends the raw pixel values from the VNC server's virtual desktop,
after first translating them into the viewer's preferred pixel format.
Raw encoding is used by default whenever the server and viewer are running on
the same machine. Otherwise, it is included only for backward compatibility
with other VNC flavors and should not be used except when absolutely necessary.
.TP
.B CopyRect
When an image rectangle has been moved from one location to another on the VNC
server's virtual desktop but has not otherwise changed, the CopyRect protocol
sends only the new location of the rectangle and relies on the VNC viewer to
copy the actual pixels. This saves network bandwidth when a window is moved
around on the VNC server or when an application sends the same image over and
over again.
.TP
.B Hextile
Hextile splits image rectangles into 16x16 tiles, which are sent in a
predetermined order. Each tile is encoded using either Raw encoding
or a variant of RRE (Rise\-and\-Run\-length\-Encoding, a 2D version of
RLE.) Hextile is a somewhat fine-grained protocol, owing to its use of small
tiles. Thus, it is very sensitive to network latency, even on
local-area networks. It is included only for backward compatibility with other
VNC flavors and should not be used except when absolutely necessary.
.TP
.B Tight
Tight encoding analyzes each image rectangle to determine the optimal encoding
method to use for it.  Rectangles with only one color are encoded as a bounding
box and a fill color.  Rectangles with only two colors are encoded as a
1-bit-per-pixel bitmap with a 2-color palette.  Rectangles with low numbers of
unique colors are encoded as a color palette and an indexed bitmap containing 8
index bits per pixel.  Rectangles with high numbers of unique colors are
encoded using either JPEG or Raw encoding, depending on the user's preference.
Zlib can optionally be used to compress the paletted and raw-encoded
rectangles. In TurboVNC, the Tight protocol has been optimized for maximum
performance with 3D and video workloads.
.SH RESOURCES
X resources that \fBvncviewer\fR knows about, aside from the
normal Xt resources, are as follows:
.TP
.B shareDesktop
Equivalent of the \fB\-shared\fR/\fB\-noshared\fR options. Default true.
.TP
.B viewOnly
Equivalent of the \fB\-viewonly\fR option. Default false.
.TP
.B fullScreen
Equivalent of the \fB\-fullscreen\fR option. Default false.
.TP
.B grabKeyboard
Grab keyboard in full-screen mode. This can help to solve problems
with losing keyboard focus. Default false.
.TP
.B raiseOnBeep
If set to false, this is the equivalent of the \fB\-noraiseonbeep\fR option. Default
true.
.TP
.B passwordFile
Equivalent of the \fB\-passwd\fR option.
.TP
.B passwordDialog
If true, vncviewer will pop up a dialog box to get the password. Otherwise,
it will get the password from the console. Irrelevant if \fBpasswordFile\fR
is set. Default false.
If Unix Login VNC authentication is used, then the dialog will prompt for
both the user name and the password.
.TP
.B userLogin
Equivalent of the \fB\-user\fR option.
.TP
.B noUnixLogin
Equivalent of the \fB\-nounixlogin\fR option.
.TP
.B encodings
Equivalent of \fB\-encodings\fR option.
.TP
.B compressLevel
Equivalent of \fB\-compresslevel\fR option (TightVNC & TurboVNC only)
.TP
.B subsampling
Equivalent of the \fB\-samp\fR option (TurboVNC only)
.TP
.B qualityLevel
Equivalent of the \fB\-quality\fR option (TightVNC & TurboVNC only)
.TP
.B enableJPEG
If set to false, this is the equivalent of the \fB\-nojpeg\fR option.
Default true. (TightVNC & TurboVNC only)
.TP
.B doubleBuffer
If set to false, this is the equivalent of the \fB\-singlebuffer\fR option.
Default true. (TurboVNC only)
.TP
.B useRemoteCursor
If set to false, this is the equivalent of the \fB\-nocursorshape\fR option.
Default true. (TightVNC & TurboVNC only)
.TP
.B useBGR233
Equivalent of \fB\-bgr233\fR option. Default false.
.TP
.B nColours
When using BGR233, try to allocate this many "exact" colors from the
BGR233 color cube. When using a shared colormap, setting this resource
lower leaves more colors for other X clients. Irrelevant when using
truecolor. Default is 256 (i.e. all of them).
.TP
.B useSharedColours
If the number of "exact" BGR233 colors successfully allocated is less
than 256, then the rest are filled in using the "nearest" colors
available. This resource says whether to only use the "exact" BGR233
colors for this purpose, or whether to use other clients' "shared"
colors as well. Default true (i.e. use other clients' colors).
.TP
.B forceOwnCmap
Equivalent of \fB\-owncmap\fR option. Default false.
.TP
.B forceTrueColour
Equivalent of \fB\-truecolour\fR option. Default false.
.TP
.B requestedDepth
Equivalent of \fB\-depth\fR option.
.TP
.B useSharedMemory
Use the MIT shared memory extension if the viewer is running on the same machine as the X
server. Default true.
.TP
.B wmDecorationWidth, wmDecorationHeight
The total width and height taken up by window manager decorations.
This is used to calculate the maximum size of the VNC viewer window. 
The default width is 4, and the default height is 24.
.TP
.B bumpScrollTime, bumpScrollPixels
When the viewer is in full\-screen mode and the VNC desktop is bigger
than the client's X display, scrolling will occur whenever the mouse
hits the edge of the screen. The maximum speed of scrolling is
bumpScrollPixels pixels every bumpScrollTime milliseconds. The actual
speed of scrolling will be slower than this, of course, depending on
how fast your machine is. Default is 20 pixels every 25 milliseconds.
.TP
.B popupButtonCount
The number of buttons in the popup window. See the README file for
more information on how to customize the buttons.
.TP
.B debug
For debugging. Default false.
.TP
.B rawDelay, copyRectDelay
For debugging.  See the README file for details.  Default 0 (off).
.SH ENVIRONMENT
When started with the \fB\-via\fR option, vncviewer reads the
\fBVNC_VIA_CMD\fR environment variable, expands patterns beginning
with the "%" character, and uses the resulting command line to
establish the secure tunnel to the VNC gateway. If \fBVNC_VIA_CMD\fR is not
set, this command line defaults to "/usr/bin/ssh -f -L %L:%H:%R %G sleep 20".

The following patterns are recognized in the \fBVNC_VIA_CMD\fR
environment (note that all of the patterns %G, %H, %L and %R must be present
in the command template):
.TP
.B %%
A literal "%";
.TP
.B %G
gateway machine name;
.TP
.B %H
remote VNC machine name, from the point of view of the gateway;
.TP
.B %L
local TCP port number;
.TP
.B %R
remote TCP port number.
.SH SEE ALSO
\fBvncserver\fR(1), \fBXvnc\fR(1), \fBvncpasswd\fR(1),
\fBvncconnect\fR(1), \fBssh\fR(1)
.SH AUTHORS
VNC was originally developed at AT&T Laboratories Cambridge. TightVNC
additions were implemented by Constantin Kaplinsky. TurboVNC, based
on TightVNC, is provided by The VirtualGL Project. Many other people
participated in development, testing and support.

\fBMan page authors:\fR
.br
Marcus Brinkmann <Marcus.Brinkmann@ruhr-uni-bochum.de>,
.br
Terran Melconian <terran@consistent.org>,
.br
Tim Waugh <twaugh@redhat.com>,
.br
Constantin Kaplinsky <const@tightvnc.com>
.br
D. R. Commander <information@virtualgl.org>
.br
Craig Ruff <cruff@ucar.edu>
